import sys  # Импортируем библиотеку для принудительного завершения в случае исключения

sequence_num = input("Введите числа через пробел")  # Принимаем на вход числа и пробелы
try:
    sequence_array = list(map(int, sequence_num.split()))  # Разделяя по пробелам преобразуем полученную строку в список
    num_find = int(input("Введите искомое число : "))  # Принимаем и преобразовываем в число введенное значение для
    # поиска

except:
    print("Введены недопустимые значения.Нужны только числа и пробелы,искомое тоже число")
    sys.exit()  # Останавливаем программу в случае получения исключения по блоку выше


def sort_array(sequence_array):  # Функция сортировки введенного списка
    for i in range(1, len(sequence_array)):  # Перебираем индексы от 1 до последнего в списке
        x = sequence_array[i]  # Переменная для хранения временного значения списка
        idx = i  # Переменная для хранения счетчика индексов при переборе
        while idx > 0 and sequence_array[idx - 1] > x:  # Если индекс >0 и значение больше чем предыдущее
            sequence_array[idx] = sequence_array[idx - 1]  # Меняем значения местами
            idx -= 1  # Понижаем счетчик на единицу
            sequence_array[idx] = x  # Обновляем временное значение переменной
    return sequence_array  # Возвращаем отсортированный список для передачи в качестве р аргумента в функцию поиска


def find(array, num_find):  # Функция поиска введенного числа по отсортированному списку
    for i, a in enumerate(array):  # Перебираем элементы списка
        if a == num_find:  # Если введенное число равняется элементу списка, то выводим сообщение
            if i == 0:  # Если найденное значение первое в списке, то наименьшее значение оно же и есть
                return f"Позиция ближайшего меньшего числа {i}, Позиция ближайшего большего числа {i + 1} "
            elif i == (len(array) - 1):  # Если найденное число последнее в списке, то наибольшее значение оно же и есть
                return f" Позиция ближайшего меньшего числа {i - 1} ,Позиция ближайшего большего числа {i} "
            else:  # Иначе печатаем индексы двух соседних значений
                return f" Позиция ближайшего меньшего числа {i - 1} ,Позиция ближайшего большего числа {i + 1} "

    return f"Числа {num_find} в списке нет ,попробуйте еще раз"  # Число не найдено


print(find(sort_array(sequence_array), num_find))  # Запускаем функцию поиска передавая в нее результат
                                                    # функции сортировки в качестве аргумента
